package com.dev.shoeshop.service;

import com.dev.shoeshop.dto.OrderDTO;
import com.dev.shoeshop.entity.Brand;
import com.dev.shoeshop.entity.Category;
import com.dev.shoeshop.entity.Product;
import com.dev.shoeshop.enums.ShipmentStatus;
import com.dev.shoeshop.repository.BrandRepository;
import com.dev.shoeshop.repository.CategoryRepository;
import com.dev.shoeshop.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Service helper ƒë·ªÉ query d·ªØ li·ªáu cho Gemini AI
 * Cung c·∫•p c√°c function m√† Gemini c√≥ th·ªÉ g·ªçi
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class GeminiDataQueryService {
    
    private final ProductRepository productRepository;
    private final CategoryRepository categoryRepository;
    private final BrandRepository brandRepository;
    private final OrderService orderService;
    
    /**
     * L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÉ AI recommendation (gi·ªõi h·∫°n 10 s·∫£n ph·∫©m)
     */
    public String getAllProductsForRecommendation() {
        try {
            List<Product> products = productRepository.findByIsDeleteFalse();
            
            if (products.isEmpty()) {
                return "Hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m n√†o.";
            }
            
            // L·∫•y t·ªëi ƒëa 10 s·∫£n ph·∫©m ƒëa d·∫°ng
            List<Product> selectedProducts = products.stream()
                    .limit(10)
                    .toList();
            
            StringBuilder result = new StringBuilder();
            for (Product p : selectedProducts) {
                result.append("‚Ä¢ ").append(p.getTitle());
                
                if (p.getBrand() != null) {
                    result.append(" - Th∆∞∆°ng hi·ªáu: ").append(p.getBrand().getName());
                }
                
                if (p.getCategory() != null) {
                    result.append(" - Lo·∫°i: ").append(p.getCategory().getName());
                }
                
                result.append(" - Gi√°: ").append(formatPrice(p.getPrice()));
                
                // Th√™m m√¥ t·∫£ ng·∫Øn n·∫øu c√≥
                if (p.getDescription() != null && !p.getDescription().isEmpty()) {
                    String shortDesc = p.getDescription().length() > 100 
                        ? p.getDescription().substring(0, 100) + "..." 
                        : p.getDescription();
                    result.append(" - M√¥ t·∫£: ").append(shortDesc);
                }
                
                result.append("\n\n");
            }
            
            return result.toString();
        } catch (Exception e) {
            log.error("Error getting all products: ", e);
            return "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m";
        }
    }
    
    /**
     * T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n
     */
    public String searchProducts(String keyword) {
        try {
            List<Product> products = productRepository.findByIsDeleteFalse();
            
            // Filter by keyword
            List<Product> filtered = products.stream()
                    .filter(p -> p.getTitle().toLowerCase().contains(keyword.toLowerCase()))
                    .limit(5) // Gi·ªõi h·∫°n 5 k·∫øt qu·∫£
                    .toList();
            
            if (filtered.isEmpty()) {
                return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a: " + keyword;
            }
            
            StringBuilder result = new StringBuilder("T√¨m th·∫•y " + filtered.size() + " s·∫£n ph·∫©m:\n\n");
            for (Product p : filtered) {
                result.append("- ").append(p.getTitle())
                      .append(" (").append(p.getBrand() != null ? p.getBrand().getName() : "N/A").append(")")
                      .append(" - Gi√°: ").append(formatPrice(p.getPrice()))
                      .append("\n");
            }
            
            return result.toString();
        } catch (Exception e) {
            log.error("Error searching products: ", e);
            return "L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m";
        }
    }
    
    /**
     * L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m theo ID
     */
    public String getProductDetail(Long productId) {
        try {
            var productOpt = productRepository.findById(productId);
            if (productOpt.isEmpty()) {
                return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + productId;
            }
            
            Product p = productOpt.get();
            StringBuilder result = new StringBuilder();
            result.append("üì¶ S·∫£n ph·∫©m: ").append(p.getTitle()).append("\n");
            result.append("üè∑Ô∏è Th∆∞∆°ng hi·ªáu: ").append(p.getBrand() != null ? p.getBrand().getName() : "N/A").append("\n");
            result.append("üìÇ Danh m·ª•c: ").append(p.getCategory() != null ? p.getCategory().getName() : "N/A").append("\n");
            result.append("üí∞ Gi√°: ").append(formatPrice(p.getPrice())).append("\n");
            
            if (p.getDescription() != null && !p.getDescription().isEmpty()) {
                result.append("üìù M√¥ t·∫£: ").append(p.getDescription().substring(0, Math.min(200, p.getDescription().length()))).append("...\n");
            }
            
            return result.toString();
        } catch (Exception e) {
            log.error("Error getting product detail: ", e);
            return "L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m";
        }
    }
    
    /**
     * L·∫•y danh s√°ch danh m·ª•c
     */
    public String getCategories() {
        try {
            List<Category> categories = categoryRepository.findAll();
            
            if (categories.isEmpty()) {
                return "Ch∆∞a c√≥ danh m·ª•c n√†o";
            }
            
            StringBuilder result = new StringBuilder("Danh s√°ch danh m·ª•c gi√†y:\n\n");
            for (Category c : categories) {
                result.append("- ").append(c.getName()).append("\n");
            }
            
            return result.toString();
        } catch (Exception e) {
            log.error("Error getting categories: ", e);
            return "L·ªói khi l·∫•y danh s√°ch danh m·ª•c";
        }
    }
    
    /**
     * L·∫•y danh s√°ch th∆∞∆°ng hi·ªáu
     */
    public String getBrands() {
        try {
            List<Brand> brands = brandRepository.findAll();
            
            if (brands.isEmpty()) {
                return "Ch∆∞a c√≥ th∆∞∆°ng hi·ªáu n√†o";
            }
            
            StringBuilder result = new StringBuilder("Danh s√°ch th∆∞∆°ng hi·ªáu:\n\n");
            for (Brand b : brands) {
                result.append("- ").append(b.getName()).append("\n");
            }
            
            return result.toString();
        } catch (Exception e) {
            log.error("Error getting brands: ", e);
            return "L·ªói khi l·∫•y danh s√°ch th∆∞∆°ng hi·ªáu";
        }
    }
    
    /**
     * L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
     */
    public String getProductsByCategory(String categoryName) {
        try {
            List<Product> products = productRepository.findByIsDeleteFalse();
            
            List<Product> filtered = products.stream()
                    .filter(p -> p.getCategory() != null && 
                                p.getCategory().getName().toLowerCase().contains(categoryName.toLowerCase()))
                    .limit(5)
                    .toList();
            
            if (filtered.isEmpty()) {
                return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong danh m·ª•c: " + categoryName;
            }
            
            StringBuilder result = new StringBuilder("S·∫£n ph·∫©m thu·ªôc danh m·ª•c " + categoryName + ":\n\n");
            for (Product p : filtered) {
                result.append("- ").append(p.getTitle())
                      .append(" - Gi√°: ").append(formatPrice(p.getPrice()))
                      .append("\n");
            }
            
            return result.toString();
        } catch (Exception e) {
            log.error("Error getting products by category: ", e);
            return "L·ªói khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c";
        }
    }
    
    /**
     * L·∫•y s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu
     */
    public String getProductsByBrand(String brandName) {
        try {
            List<Product> products = productRepository.findByIsDeleteFalse();
            
            List<Product> filtered = products.stream()
                    .filter(p -> p.getBrand() != null && 
                                p.getBrand().getName().toLowerCase().contains(brandName.toLowerCase()))
                    .limit(5)
                    .toList();
            
            if (filtered.isEmpty()) {
                return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c·ªßa th∆∞∆°ng hi·ªáu: " + brandName;
            }
            
            StringBuilder result = new StringBuilder("S·∫£n ph·∫©m c·ªßa th∆∞∆°ng hi·ªáu " + brandName + ":\n\n");
            for (Product p : filtered) {
                result.append("- ").append(p.getTitle())
                      .append(" - Gi√°: ").append(formatPrice(p.getPrice()))
                      .append("\n");
            }
            
            return result.toString();
        } catch (Exception e) {
            log.error("Error getting products by brand: ", e);
            return "L·ªói khi l·∫•y s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu";
        }
    }
    
    /**
     * L·∫•y ƒë∆°n h√†ng c·ªßa user
     */
    public String getUserOrders(Long userId) {
        try {
            if (userId == null) {
                return "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ƒë∆°n h√†ng";
            }
            
            List<OrderDTO> orders = orderService.getOrdersByUserId(userId);
            
            if (orders.isEmpty()) {
                return "B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o";
            }
            
            StringBuilder result = new StringBuilder("Danh s√°ch ƒë∆°n h√†ng c·ªßa b·∫°n:\n\n");
            for (OrderDTO order : orders.stream().limit(5).toList()) {
                result.append("- ƒê∆°n h√†ng #").append(order.getId())
                      .append(" - T·ªïng: ").append(formatPrice(order.getTotalPrice()))
                      .append(" - Tr·∫°ng th√°i: ").append(getStatusText(order.getStatus()))
                      .append("\n");
            }
            
            return result.toString();
        } catch (Exception e) {
            log.error("Error getting user orders: ", e);
            return "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng";
        }
    }
    
    /**
     * L·∫•y th√¥ng tin chung v·ªÅ c·ª≠a h√†ng
     */
    public String getStoreInfo() {
        return """
                üè™ DeeG Shoe Shop
                
                üìç ƒê·ªãa ch·ªâ: 1 V√µ VƒÉn Ng√¢n, Th·ªß ƒê·ª©c, TP.HCM
                üìû Hotline: 1900 xxxx
                ‚è∞ Gi·ªù m·ªü c·ª≠a: 8:00 - 22:00 (Th·ª© 2 - Ch·ªß Nh·∫≠t)
                
                ‚ú® Ch√∫ng t√¥i chuy√™n cung c·∫•p gi√†y d√©p th·ªÉ thao ch√≠nh h√£ng v·ªõi nhi·ªÅu th∆∞∆°ng hi·ªáu n·ªïi ti·∫øng.
                üöö Giao h√†ng to√†n qu·ªëc
                üí≥ Thanh to√°n COD ho·∫∑c chuy·ªÉn kho·∫£n
                üîÑ ƒê·ªïi tr·∫£ trong 7 ng√†y
                """;
    }
    
    /**
     * L·∫•y ch√≠nh s√°ch ƒë·ªïi tr·∫£
     */
    public String getReturnPolicy() {
        return """
                üîÑ CH√çNH S√ÅCH ƒê·ªîI TR·∫¢
                
                ‚úÖ ƒêi·ªÅu ki·ªán ƒë·ªïi tr·∫£:
                - S·∫£n ph·∫©m c√≤n nguy√™n v·∫πn, ch∆∞a qua s·ª≠ d·ª•ng
                - C√≤n ƒë·∫ßy ƒë·ªß h·ªôp, ph·ª• ki·ªán, h√≥a ƒë∆°n
                - Trong v√≤ng 7 ng√†y k·ªÉ t·ª´ ng√†y nh·∫≠n h√†ng
                
                üìù Quy tr√¨nh:
                1. Li√™n h·ªá hotline ho·∫∑c chat v·ªõi ch√∫ng t√¥i
                2. G·ª≠i s·∫£n ph·∫©m v·ªÅ c·ª≠a h√†ng (ho·∫∑c ch√∫ng t√¥i ƒë·∫øn l·∫•y)
                3. Ki·ªÉm tra s·∫£n ph·∫©m
                4. ƒê·ªïi size/m√†u ho·∫∑c ho√†n ti·ªÅn
                
                ‚ö†Ô∏è L∆∞u √Ω: Kh√¥ng √°p d·ª•ng cho s·∫£n ph·∫©m sale/khuy·∫øn m√£i
                """;
    }
    
    // Helper methods
    private String formatPrice(Double price) {
        if (price == null) return "N/A";
        return String.format("%,.0f ƒë", price);
    }
    
    private String getStatusText(ShipmentStatus status) {
        return switch (status) {
            case IN_STOCK -> "Ch·ªù x√°c nh·∫≠n";
            case SHIPPED -> "ƒêang giao h√†ng";
            case DELIVERED -> "ƒê√£ giao th√†nh c√¥ng";
            case CANCEL -> "ƒê√£ h·ªßy";
            case RETURN -> "ƒê√£ tr·∫£ h√†ng";
        };
    }
}

