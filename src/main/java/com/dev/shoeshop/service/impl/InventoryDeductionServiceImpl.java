package com.dev.shoeshop.service.impl;

import com.dev.shoeshop.entity.Inventory;
import com.dev.shoeshop.entity.OrderDetail;
import com.dev.shoeshop.repository.InventoryRepository;
import com.dev.shoeshop.service.InventoryDeductionService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Implementation c·ªßa InventoryDeductionService
 * X·ª≠ l√Ω logic FIFO ƒë·ªÉ tr·ª´ h√†ng v√† t√≠nh l·ª£i nhu·∫≠n
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class InventoryDeductionServiceImpl implements InventoryDeductionService {
    
    private final InventoryRepository inventoryRepository;
    
    /**
     * Tr·ª´ h√†ng t·ª´ inventory theo FIFO v√† t√≠nh profit
     */
    @Override
    @Transactional
    public void deductInventoryAndCalculateProfit(OrderDetail orderDetail) {
        Long productDetailId = orderDetail.getProduct().getId();
        int quantityToDeduct = orderDetail.getQuantity();
        
        log.info("=== FIFO Deduction Started ===");
        log.info("ProductDetail ID: {}, Quantity to deduct: {}", productDetailId, quantityToDeduct);
        
        // ‚úÖ L·∫•y danh s√°ch inventory theo FIFO (l√¥ c≈© nh·∫•t tr∆∞·ªõc)
        List<Inventory> inventories = inventoryRepository.findAvailableInventoriesFIFO(productDetailId);
        
        if (inventories.isEmpty()) {
            throw new RuntimeException("S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng!");
        }
        
        // ‚úÖ T√≠nh t·ªïng s·ªë l∆∞·ª£ng c√≥ s·∫µn
        int totalAvailable = inventories.stream()
                .mapToInt(Inventory::getQuantity)
                .sum();
        
        log.info("Total available inventory: {}", totalAvailable);
        
        if (totalAvailable < quantityToDeduct) {
            throw new RuntimeException("Kh√¥ng ƒë·ªß h√†ng! Ch·ªâ c√≤n " + totalAvailable + " s·∫£n ph·∫©m.");
        }
        
        // ‚úÖ Tr·ª´ d·∫ßn t·ª´ng l√¥ theo FIFO v√† track cost
        int remaining = quantityToDeduct;
        double totalCost = 0.0; // T·ªïng gi√° nh·∫≠p cho s·ªë l∆∞·ª£ng n√†y
        
        for (Inventory inventory : inventories) {
            if (remaining <= 0) break;
            
            int currentQuantity = inventory.getQuantity();
            int toDeduct = Math.min(remaining, currentQuantity);
            
            // Tr·ª´ s·ªë l∆∞·ª£ng v√† tƒÉng soldQuantity
            inventory.setQuantity(currentQuantity - toDeduct);
            inventory.setSoldQuantity(inventory.getSoldQuantity() + toDeduct);
            inventoryRepository.save(inventory);
            
            // T√≠ch l≈©y cost
            double costPrice = inventory.getCostPrice() != null ? inventory.getCostPrice() : 0.0;
            totalCost += costPrice * toDeduct;
            remaining -= toDeduct;
            
            log.info("‚úÖ Deducted {} from Inventory ID {} (Cost: {}ƒë) | Remaining: {}/{}", 
                    toDeduct, inventory.getId(), costPrice, inventory.getQuantity(), inventory.getInitialQuantity());
        }
        
        // ‚úÖ T√≠nh average cost price cho order detail n√†y
        double averageCostPrice = totalCost / quantityToDeduct;
        
        // ‚úÖ T√≠nh profit
        double sellingPrice = orderDetail.getPrice();
        double profit = (sellingPrice - averageCostPrice) * quantityToDeduct;
        
        // ‚úÖ L∆∞u v√†o OrderDetail
        orderDetail.setCostPriceAtSale(averageCostPrice);
        orderDetail.setProfit(profit);
        
        log.info("üí∞ Cost Price: {}ƒë | Selling Price: {}ƒë | Profit: {}ƒë (Margin: {:.2f}%)", 
                averageCostPrice, sellingPrice, profit, orderDetail.getProfitMargin());
        log.info("=== FIFO Deduction Completed ===");
    }
    
    /**
     * Ho√†n tr·∫£ h√†ng v√†o inventory khi h·ªßy ƒë∆°n
     * TODO: Implement logic ho√†n tr·∫£ (optional - n·∫øu c·∫ßn)
     */
    @Override
    @Transactional
    public void returnInventory(OrderDetail orderDetail) {
        // Logic ho√†n tr·∫£ h√†ng khi h·ªßy ƒë∆°n
        // C√≥ th·ªÉ implement sau n·∫øu c·∫ßn
        log.warn("returnInventory not implemented yet for OrderDetail ID: {}", orderDetail.getId());
    }
}
