package com.dev.shoeshop.config;

import com.dev.shoeshop.entity.Brand;
import com.dev.shoeshop.entity.Category;
import com.dev.shoeshop.entity.Product;
import com.dev.shoeshop.entity.ProductDetail;
import com.dev.shoeshop.entity.Role;
import com.dev.shoeshop.entity.Users;
import com.dev.shoeshop.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.Statement;

/**
 * T·ª± ƒë·ªông init data khi app kh·ªüi ƒë·ªông l·∫ßn ƒë·∫ßu
 * Ch·ªâ ch·∫°y 1 l·∫ßn khi database r·ªóng
 */
@Component
@RequiredArgsConstructor
public class ApplicationInitConfig implements ApplicationRunner {

    private final RoleRepository roleRepository;
    private final CategoryRepository categoryRepository;
    private final BrandRepository brandRepository;
    private final ProductRepository productRepository;
    private final ProductDetailRepository productDetailRepository;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final DataSource dataSource;

    @Override
    public void run(ApplicationArguments args) throws Exception {
        // Ch·ªâ init n·∫øu database r·ªóng
        if (roleRepository.count() > 0) {
            System.out.println("‚úÖ Database ƒë√£ c√≥ data, skip initialization");
            return;
        }

        System.out.println("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o data c∆° b·∫£n...");

        // 1. T·∫°o Roles
        initRoles();

        // 2. T·∫°o Categories
        initCategories();

        // 3. T·∫°o Brands
        initBrands();

        // 4. T·∫°o Products & ProductDetails
        initProducts();

        // 5. T·∫°o Users
        initUsers();

        // 6. T·∫°o Triggers
        initTriggers();

        System.out.println("‚úÖ Kh·ªüi t·∫°o data th√†nh c√¥ng!");
    }

    private void initRoles() {
        Role admin = new Role();
        admin.setRoleName("admin");
        roleRepository.save(admin);

        Role manager = new Role();
        manager.setRoleName("manager");
        roleRepository.save(manager);

        Role user = new Role();
        user.setRoleName("user");
        roleRepository.save(user);

        Role shipper = new Role();
        shipper.setRoleName("shipper");
        roleRepository.save(shipper);

        System.out.println("  ‚Üí ƒê√£ t·∫°o 4 roles");
    }

    private void initCategories() {
        String[][] categories = {
            {"Gi√†y Th·ªÉ Thao", "Gi√†y d√†nh cho ho·∫°t ƒë·ªông th·ªÉ thao, ch·∫°y b·ªô, gym, training"},
            {"Gi√†y Sneaker", "Gi√†y sneaker phong c√°ch streetwear, th·ªùi trang ƒë∆∞·ªùng ph·ªë"},
            {"Gi√†y B√≥ng ƒê√°", "Gi√†y chuy√™n d·ª•ng cho c·∫ßu th·ªß b√≥ng ƒë√°, h·ªó tr·ª£ b√°m s√¢n v√† di chuy·ªÉn nhanh"},
            {"Gi√†y B√≥ng R·ªï", "Gi√†y th·ªÉ thao chuy√™n cho b√≥ng r·ªï, h·ªó tr·ª£ b·∫≠t nh·∫£y v√† b·∫£o v·ªá c·ªï ch√¢n"},
            {"Sandals & D√©p", "D√©p, sandals tho√°ng m√°t, ti·ªán d·ª•ng h√†ng ng√†y"}
        };

        for (int i = 0; i < categories.length; i++) {
            Category category = new Category();
            category.setName(categories[i][0]);
            category.setDescription(categories[i][1]);
            categoryRepository.save(category);
        }

        System.out.println("  ‚Üí ƒê√£ t·∫°o 5 categories");
    }

    private void initBrands() {
        String[] brandNames = {"Nike", "Adidas", "Puma", "Converse", "Vans", 
                               "New Balance", "Reebok", "Fila", "Under Armour", "Skechers"};

        for (int i = 0; i < brandNames.length; i++) {
            Brand brand = new Brand();
            brand.setName(brandNames[i]);
            brandRepository.save(brand);
        }

        System.out.println("  ‚Üí ƒê√£ t·∫°o 10 brands");
    }

    private void initProducts() {
        // Product 1: Gi√†y Th·ªÉ Thao Nam
        Product p1 = createProduct("Gi√†y Th·ªÉ Thao Nam",
            "Gi√†y th·ªÉ thao thi·∫øt k·∫ø hi·ªán ƒë·∫°i, ph√π h·ª£p cho ch·∫°y b·ªô v√† t·∫≠p gym", 1L, 1L, 1890000, "/images/the-thao-1.jpg");
        createProductDetails(p1);

        // Product 2: Running Pro
        Product p2 = createProduct("Gi√†y Th·ªÉ Thao Running Pro", 
            "Gi√†y ch·∫°y b·ªô chuy√™n nghi·ªáp, ƒë·ªám kh√≠ √™m √°i", 1L, 2L, 2350000, "/images/the-thao-2.jpg");
        createProductDetails(p2);

        // Product 3: Training All Day
        Product p3 = createProduct("Gi√†y Training All Day", 
            "Gi√†y t·∫≠p luy·ªán ƒëa nƒÉng, b√°m s√¢n t·ªët", 1L, 3L, 1750000, "/images/the-thao-3.jpg");
        createProductDetails(p3);

        // Product 4-6: Sneakers
        Product p4 = createProduct("Sneaker Street Style ƒê·ªè", 
            "Sneaker phong c√°ch ƒë∆∞·ªùng ph·ªë, m√†u ƒë·ªè n·ªïi b·∫≠t", 2L, 4L, 1590000, "/images/sneaker-1.jpg");
        createProductDetails(p4);

        Product p5 = createProduct("Sneaker Low-Top Tr·∫Øng", 
            "Sneaker tr·∫Øng basic, d·ªÖ ph·ªëi ƒë·ªì", 2L, 5L, 1450000, "/images/sneaker-2.jpg");
        createProductDetails(p5);

        Product p6 = createProduct("Sneaker High-Top Canvas", 
            "Sneaker c·ªï cao v·∫£i canvas, style vintage", 2L, 4L, 1690000, "/images/sneaker-3.jpg");
        createProductDetails(p6);

        // Product 7-9: B√≥ng ƒê√°
        Product p7 = createProduct("Gi√†y B√≥ng ƒê√° S√¢n C·ªè TF", 
            "Gi√†y b√≥ng ƒë√° s√¢n c·ªè nh√¢n t·∫°o, ƒë·∫ø TF b√°m s√¢n c·ª±c t·ªët", 3L, 1L, 2890000, "/images/bong-da-1.jpg");
        createProductDetails(p7);

        Product p8 = createProduct("Gi√†y B√≥ng ƒê√° Mercurial", 
            "Gi√†y b√≥ng ƒë√° t·ªëc ƒë·ªô, thi·∫øt k·∫ø kh√≠ ƒë·ªông h·ªçc", 3L, 1L, 3250000, "/images/bong-da-2.jpg");
        createProductDetails(p8);

        Product p9 = createProduct("Gi√†y ƒê√° Banh Predator", 
            "Gi√†y s√∫t b√≥ng chu·∫©n x√°c, c√¥ng ngh·ªá Control Frame", 3L, 2L, 3150000, "/images/bong-da-3.jpg");
        createProductDetails(p9);

        // Product 10-12: B√≥ng R·ªï
        Product p10 = createProduct("Gi√†y B√≥ng R·ªï Air Jordan",
            "Gi√†y b√≥ng r·ªï c·ªï cao, b·∫£o v·ªá c·ªï ch√¢n t·ªëi ∆∞u", 4L, 1L, 4590000, "/images/bong-ro-1.jpg");
        createProductDetails(p10);

        Product p11 = createProduct("Basketball Shoes Pro", 
            "Gi√†y b√≥ng r·ªï chuy√™n nghi·ªáp, ƒë·∫ø cao su ch·ªëng tr∆°n", 4L, 2L, 4150000, "/images/bong-ro-2.jpg");
        createProductDetails(p11);

        Product p12 = createProduct("Gi√†y B√≥ng R·ªï Harden Style", 
            "Thi·∫øt k·∫ø nƒÉng ƒë·ªông, h·ªó tr·ª£ b·∫≠t nh·∫£y", 4L, 2L, 3790000, "/images/bong-ro-3.jpg");
        createProductDetails(p12);

        // Product 13-15: Sandals & D√©p
        Product p13 = createProduct("D√©p Quai Ngang Th·ªùi Trang", 
            "D√©p quai ngang √™m √°i, ph√π h·ª£p m√πa h√®", 5L, 1L, 590000, "/images/dep-1.jpg");
        createProductDetails(p13);

        Product p14 = createProduct("D√©p Adilette Classic", 
            "D√©p th·ªÉ thao iconic, tho√°ng m√°t", 5L, 2L, 750000, "/images/dep-2.jpg");
        createProductDetails(p14);

        Product p15 = createProduct("Sandal Outdoor Adventure", 
            "Sandal d√£ ngo·∫°i, ƒëi ph∆∞·ª£t, leo n√∫i", 5L, 9L, 1150000, "/images/sandal-2.jpg");
        createProductDetails(p15);

        System.out.println("  ‚Üí ƒê√£ t·∫°o 15 products v·ªõi 120 product details");
    }

    private Product createProduct(String title, String description, 
                                  Long categoryId, Long brandId, Integer price, String imageUrl) {
        Product product = new Product();
        product.setTitle(title);
        product.setDescription(description);
        product.setImage(imageUrl);
        
        Category category = categoryRepository.findById(categoryId).orElseThrow();
        Brand brand = brandRepository.findById(brandId).orElseThrow();
        
        product.setCategory(category);
        product.setBrand(brand);
        product.setPrice(price);
        
        return productRepository.save(product);
    }

    private void createProductDetails(Product product) {
        int[] sizes = {38, 39, 40, 41, 42, 43, 44, 45};
        int[] priceAdds = {0, 0, 0, 50000, 50000, 100000, 100000, 150000};

        for (int i = 0; i < sizes.length; i++) {
            ProductDetail detail = new ProductDetail();
            detail.setProduct(product);
            detail.setSize(sizes[i]);
            detail.setPriceadd(priceAdds[i]);
            productDetailRepository.save(detail);
        }
    }

    private void initUsers() {
        // Password: 123456
        String encodedPassword = passwordEncoder.encode("123456");

        // Admin
        Users admin = new Users();
        admin.setEmail("admin@admin");
        admin.setPassword(encodedPassword);
        admin.setFullname("Admin");
        admin.setPhone("0901234567");
        admin.setRole(roleRepository.findByRoleName("admin").orElseThrow());
        admin.setIsActive(true);
        admin.setProvider("LOCAL");
        userRepository.save(admin);

        // Manager
        Users manager = new Users();
        manager.setEmail("manager@manager");
        manager.setPassword(encodedPassword);
        manager.setFullname("Manager");
        manager.setPhone("0902345678");
        manager.setRole(roleRepository.findByRoleName("manager").orElseThrow());
        manager.setIsActive(true);
        manager.setProvider("LOCAL");
        userRepository.save(manager);

        // User
        Users user = new Users();
        user.setEmail("user@user");
        user.setPassword(encodedPassword);
        user.setFullname("User");
        user.setPhone("0903456789");
        user.setRole(roleRepository.findByRoleName("user").orElseThrow());
        user.setIsActive(true);
        user.setProvider("LOCAL");
        userRepository.save(user);

        // Shipper
        Users shipper = new Users();
        shipper.setEmail("shipper@shipper");
        shipper.setPassword(encodedPassword);
        shipper.setFullname("Shipper");
        shipper.setPhone("0904567890");
        shipper.setRole(roleRepository.findByRoleName("shipper").orElseThrow());
        shipper.setIsActive(true);
        shipper.setProvider("LOCAL");
        userRepository.save(shipper);

        System.out.println("  ‚Üí ƒê√£ t·∫°o 4 users (password: 123456)");
    }

    private void initTriggers() {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {

            System.out.println("  üîß ƒêang t·∫°o triggers...");

            // Drop existing triggers tr∆∞·ªõc
            dropTriggersIfExist(statement);

            // 1. INVENTORY TRIGGERS
            createInventoryTriggers(statement);

            // 2. ORDER STATUS TRIGGERS  
            createOrderStatusTriggers(statement);

            // 3. RATING TRIGGERS
            createRatingTriggers(statement);

            System.out.println("  ‚Üí ƒê√£ t·∫°o t·∫•t c·∫£ triggers th√†nh c√¥ng!");

        } catch (Exception e) {
            System.err.println("  ‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o triggers: " + e.getMessage());
            // Kh√¥ng throw exception, v√¨ triggers kh√¥ng critical cho app startup
        }
    }

    private void dropTriggersIfExist(Statement statement) throws Exception {
        String[] triggers = {
            "after_order_detail_insert",
            "handle_order_status_change",
            "validate_inventory_before_shipped",
            "tr_rating_insert"
        };

        for (String trigger : triggers) {
            try {
                statement.execute("DROP TRIGGER IF EXISTS " + trigger);
            } catch (Exception e) {
                // Ignore n·∫øu trigger kh√¥ng t·ªìn t·∫°i
            }
        }
    }

    private void createInventoryTriggers(Statement statement) throws Exception {
        // Trigger 1: Tr·ª´ kho ngay khi ƒë·∫∑t h√†ng
        String trigger1 = """
            CREATE TRIGGER after_order_detail_insert
            BEFORE INSERT ON order_detail
            FOR EACH ROW
            BEGIN
                DECLARE v_current_stock BIGINT;
                DECLARE v_product_name VARCHAR(255);
                DECLARE v_error_message VARCHAR(500);
                
                SELECT i.quantity INTO v_current_stock
                FROM inventory i
                WHERE i.product_detail_id = NEW.productdetail_id
                LIMIT 1;
                
                IF v_current_stock IS NULL THEN
                    SELECT p.title INTO v_product_name
                    FROM product_detail pd
                    JOIN product p ON pd.product_id = p.id
                    WHERE pd.id = NEW.productdetail_id;
                    
                    SET v_error_message = CONCAT('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong kho: ', COALESCE(v_product_name, 'Unknown'));
                    
                    SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = v_error_message;
                    
                ELSEIF v_current_stock < NEW.quantity THEN
                    SELECT p.title INTO v_product_name
                    FROM product_detail pd
                    JOIN product p ON pd.product_id = p.id
                    WHERE pd.id = NEW.productdetail_id;
                    
                    SET v_error_message = CONCAT('Kh√¥ng ƒë·ªß h√†ng trong kho! S·∫£n ph·∫©m: ', COALESCE(v_product_name, 'Unknown'), 
                                                  ' - T·ªìn kho: ', v_current_stock, 
                                                  ' - Y√™u c·∫ßu: ', NEW.quantity);
                    
                    SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = v_error_message;
                END IF;
                
                UPDATE inventory
                SET quantity = quantity - NEW.quantity
                WHERE product_detail_id = NEW.productdetail_id;
            END
            """;

        statement.execute(trigger1);
        System.out.println("    ‚úì after_order_detail_insert");
    }

    private void createOrderStatusTriggers(Statement statement) throws Exception {
        // Trigger 2: X·ª≠ l√Ω khi status thay ƒë·ªïi
        String trigger2 = """
            CREATE TRIGGER handle_order_status_change
            AFTER UPDATE ON orders
            FOR EACH ROW
            BEGIN
                IF NEW.status = 'DELIVERED' AND OLD.status != 'DELIVERED' THEN
                    UPDATE product p
                    INNER JOIN product_detail pd ON p.id = pd.product_id
                    INNER JOIN order_detail od ON pd.id = od.productdetail_id
                    SET p.sold_quantity = p.sold_quantity + od.quantity
                    WHERE od.order_id = NEW.id;
                END IF;
                
                IF NEW.status = 'CANCEL' AND OLD.status != 'CANCEL' THEN
                    UPDATE inventory i
                    INNER JOIN order_detail od ON i.product_detail_id = od.productdetail_id
                    SET i.quantity = i.quantity + od.quantity
                    WHERE od.order_id = NEW.id;
                END IF;
                
                IF NEW.status = 'RETURN' AND OLD.status = 'DELIVERED' THEN
                    UPDATE inventory i
                    INNER JOIN order_detail od ON i.product_detail_id = od.productdetail_id
                    SET i.quantity = i.quantity + od.quantity
                    WHERE od.order_id = NEW.id;
                    
                    UPDATE product p
                    INNER JOIN product_detail pd ON p.id = pd.product_id
                    INNER JOIN order_detail od ON pd.id = od.productdetail_id
                    SET p.sold_quantity = GREATEST(0, p.sold_quantity - od.quantity)
                    WHERE od.order_id = NEW.id;
                END IF;
            END
            """;

        statement.execute(trigger2);
        System.out.println("    ‚úì handle_order_status_change");
    }

    private void createRatingTriggers(Statement statement) throws Exception {
        // Trigger 3: C·∫≠p nh·∫≠t rating khi c√≥ ƒë√°nh gi√° m·ªõi
        String trigger3 = """
            CREATE TRIGGER tr_rating_insert
            AFTER INSERT ON rating
            FOR EACH ROW
            BEGIN
                UPDATE product 
                SET 
                    total_reviewers = total_reviewers + 1,
                    total_stars = total_stars + NEW.star,
                    average_rating = CASE 
                        WHEN (total_reviewers + 1) > 0 THEN (total_stars + NEW.star) / (total_reviewers + 1)
                        ELSE 0.0
                    END
                WHERE id = NEW.product_id;
            END
            """;

        statement.execute(trigger3);
        System.out.println("    ‚úì tr_rating_insert");
    }
}
