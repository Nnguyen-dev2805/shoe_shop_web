app.base-url=http://localhost:8081

# Config Database
#spring.datasource.url=jdbc:mysql://shoe-shop-2025-nhatnguyendevpro.c.aivencloud.com:20003/shoe_shop_dev?sslMode=REQUIRED
#spring.datasource.username=avnadmin
#spring.datasource.password=AVNS_3UPN7NHgKpUXvFU-80p
spring.datasource.url = jdbc:mysql://localhost:3306/shoe_shop_basic_fix

spring.datasource.username=root
#spring.datasource.password=abc123@@
#spring.datasource.password=Tanyen909@
#spring.datasource.password=Abc123@
spring.datasource.password=123456

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
spring.jpa.hibernate.ddl-auto = update

storage.upload-dir=./uploads
storage.base-url=/images/
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=10MB

# Cloudinary Configuration (Cloud Image Storage)
cloudinary.cloud-name=dpsj19dsn
cloudinary.api-key=772979412255686
cloudinary.api-secret=tHsJ3wStHKmpcNQF-ijVbC-KEnQ

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=172499091963-kl0nkn7duags4an82i5e4nng94mlnmu9.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8081/login/oauth2/code/google

# OAuth2 Provider Configuration
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=email

# Gemini API Configuration
gemini.api.key=AIzaSyBqrmbSAvX45Gk7nqAsZMujUUDEE4BbjP0

# ==========================================
# PayOS Configuration (UAT/Test Environment)
# ==========================================
# Core PayOS credentials (Test/Sandbox)
payos.client-id=49c0ca85-5918-4399-8b71-a61d4963f9e7
payos.api-key=79a46722-a661-4f68-9405-44f8374d2def
payos.checksum-key=e9e2a47382e7ebf8963422fc85ace3aee5eb0a0f8c8b659ae80ec7e545300cef
payos.log-level=NONE

# PayOS Payout credentials (Optional - leave empty if not using)
payos.payout-client-id=
payos.payout-api-key=
payos.payout-checksum-key=

# Goong API Configuration
goong.api.key=xaYvtvHWHGQswPol8J4GZX1LFRcC5pCsJmCfOcOU
goong.distance.matrix.url=https://rsapi.goong.io/DistanceMatrix

# Shipping Configuration
shipping.cache.expiry.days=30
shipping.default.fee=30000
shipping.goong.enabled=true

# Config SMTP
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=tanyen.909@gmail.com
spring.mail.password=yglt cpvy tfec zlgh
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.transport.protocol=smtp