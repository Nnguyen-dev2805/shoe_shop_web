# ==========================================
# PRODUCTION CONFIGURATION
# ALL environment variables MUST be set in Render Dashboard
# NO default values - Force explicit configuration
# ==========================================
#
# ⚠️  WARNING FOR LOCAL DEVELOPMENT:
# This profile REQUIRES environment variables to be set.
# For local dev, either:
# 1. Use 'uat' profile: spring.profiles.active=uat
# 2. Create .env file with all required variables
# 3. Set env vars in IDE run configuration
#
# ==========================================

# Database Configuration (NO DEFAULTS - Must set in Render)
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate Configuration
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
# IMPORTANT: Must set 'validate' in Render for production safety
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO}

# HikariCP Connection Pool (Optimized for Render 512MB)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# Server Configuration
server.port=${PORT:8080}
server.compression.enabled=true
server.compression.mime-types=text/html,text/css,application/javascript,application/json
server.compression.min-response-size=1024

# File Upload (Render default: /app/uploads)
storage.upload-dir=${UPLOAD_DIR}
storage.base-url=/images/
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=10MB

# Cloudinary Configuration (Cloud Image Storage)
cloudinary.cloud-name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api-key=${CLOUDINARY_API_KEY}
cloudinary.api-secret=${CLOUDINARY_API_SECRET}

# Google OAuth2 Configuration (NO DEFAULTS - Must set in Render)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${APP_URL}/login/oauth2/code/google

# OAuth2 Provider Configuration
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=email

# API Keys (NO DEFAULTS - Must set in Render)
gemini.api.key=${GEMINI_API_KEY}
goong.api.key=${GOONG_API_KEY}
goong.distance.matrix.url=https://rsapi.goong.io/DistanceMatrix

# ==========================================
# PayOS Configuration (Production)
# ==========================================
# IMPORTANT: Set these environment variables in Render Dashboard
# Get production credentials from: https://my.payos.vn/
payos.client-id=${PAYOS_CLIENT_ID}
payos.api-key=${PAYOS_API_KEY}
payos.checksum-key=${PAYOS_CHECKSUM_KEY}
payos.log-level=${PAYOS_LOG_LEVEL:NONE}

# PayOS Payout credentials (Optional)
payos.payout-client-id=${PAYOS_PAYOUT_CLIENT_ID:}
payos.payout-api-key=${PAYOS_PAYOUT_API_KEY:}
payos.payout-checksum-key=${PAYOS_PAYOUT_CHECKSUM_KEY:}

# Shipping Configuration
shipping.cache.expiry.days=30
shipping.default.fee=30000
shipping.goong.enabled=true

# Email Configuration (NO DEFAULTS - Must set in Render)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.transport.protocol=smtp


# Logging Configuration (Production)
logging.level.root=WARN
logging.level.com.dev.shoeshop=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=WARN
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Actuator Endpoints (Health Check for Render)
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.metrics.export.simple.enabled=true

# Static Resources Caching
spring.web.resources.cache.cachecontrol.max-age=31536000
spring.web.resources.cache.cachecontrol.cache-public=true
